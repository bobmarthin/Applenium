<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LoggerDLL v1.0</name>
    </assembly>
    <members>
        <member name="T:LoggerDLL.ClientLogger">
            <summary>
            Logger object for Front-End clients
            </summary>
        </member>
        <member name="T:LoggerDLL.LogObject">
            <summary>
            Logger object class. Version 1.0
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Debug(System.String,System.Exception)">
            <summary>
                Debug is public function to report debug events
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Info(System.String,System.Exception)">
            <summary>
                Info is public function to report Information events
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Error(System.String,System.Exception)">
            <summary>
                is public function to report error events
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Fatal(System.String,System.Exception)">
            <summary>
                Debug is public function to report fatal events
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Passed(System.String)">
            <summary>
                To report passed test/step or scenario
                Should only have message string as parameter
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Failed(System.String)">
            <summary>
                To report failed test/step or scenario
            </summary>
        </member>
        <member name="M:LoggerDLL.LogObject.Done(System.String)">
            <summary>
                To report Done passed test/step or scenario
                Should only have message string as parameter
            </summary>
        </member>
        <member name="M:LoggerDLL.ClientLogger.printLog(System.Int32)">
            <summary>
            A function to call on when writing to log
            </summary>
            <param name="status">pass in the type of TAG to appear in the log.  Example of a tag - ResultStatus.PASSED</param>
            <returns>Return 1 for succesful writing to file, 0 for errors.</returns>
        </member>
        <member name="T:LoggerDLL.BackendLogger">
            <summary>
            Logger object for Back-End clients
            </summary>
        </member>
        <member name="M:LoggerDLL.BackendLogger.#ctor">
            <summary>
            Default constractor
            </summary>
        </member>
        <member name="M:LoggerDLL.BackendLogger.printLog(System.Int32)">
            <summary>
            A function to call on when writing to log
            </summary>
            <param name="statusTag">pass in the type of TAG to appear in the log.  Example of a tag - ResultStatus.PASSED</param>
            <returns>Return 1 for succesful writing to file, 0 for errors.</returns>
        </member>
    </members>
</doc>
